---getStockList---
SELECT
    place.id place_id,
    place.building place_building,
    place.room place_room,
    type_place.title type_place_title
FROM place
LEFT JOIN type_place ON (place.type_place_id = type_place.id)
WHERE (type_place.title = 'Склад')
ORDER BY place.id
---getStockList---



---getPlaceList---
            SELECT
                place.id,
                place.building building,
                place.room room,
                place.department department,
                place.employee_position employee_position,
                place.employee_name employee_name,
                type_place.title type_place_title,
                place.description description
            FROM place
            LEFT JOIN type_place ON (place.type_place_id = type_place.id)
            WHERE  (place.id::text LIKE '${req.query.place_id_for_search}'
                AND place.building LIKE '${req.query.building_for_search}'
                AND place.room LIKE '%${req.query.room_for_search}%'
                AND place.department LIKE '${req.query.department_for_search}'
                AND LOWER(place.employee_name) LIKE '%${req.query.name_for_search}%'
                AND LOWER(place.employee_position) LIKE '%${req.query.employee_position_for_search}%'
                AND type_place.title LIKE '${req.query.type_place_for_search}'
                AND place.description != 'Принтер/МФУ')
            ORDER BY id
---getPlaceList---



---getMovement---
            SELECT
                movement.id,
                movement.date date,
                movement.employee_name_at_time_of_movement employee_name_at_time_of_movement,
                hardware.id hardware_id,
                hardware.type type_hardware,
                hardware.characteristics characteristics_hardware,
                place.id place_id,
                place.building building,
                place.room room,
                place.department,
                place.description place_description,
                place.employee_position employee_position,
                place.employee_name employee_name,
                type_place.title type_place_title
            FROM movement
            LEFT JOIN hardware ON (movement.hardware_id = hardware.id)
            LEFT JOIN place ON (place.id = movement.place_id)
            LEFT JOIN type_place ON (place.type_place_id = type_place.id)
            WHERE (place.type_place_id <> 1)
            ORDER BY movement.id DESC
---getMovement---



---getTrebovanieNakladnayaList---
   SELECT  trebovanie_nakladnaya.id,
           trebovanie_nakladnaya.date,
           trebovanie_nakladnaya.comment,
           trebovanie_nakladnaya.contractor,
           trebovanie_nakladnaya.an_invoice_for_payment,
           trebovanie_nakladnaya.shipping_document,
           type_material_values.name type_material_values_name,
     FROM  trebovanie_nakladnaya
LEFT JOIN  type_material_values ON trebovanie_nakladnaya.type_material_values_id = type_material_values.id
    WHERE  (trebovanie_nakladnaya.id::text LIKE '${req.query.trebovanie_nakladnaya_id_for_search}')
 ORDER BY  trebovanie_nakladnaya.id
     DESC
---getTrebovanieNakladnayaList---



CREATE FUNCTION add_hardware(count_for_add INTEGER,
                             stock_id_for_add INTEGER,
                             type_for_add TEXT,
                             characteristics_for_add TEXT,
                             trebovanie_nakladnaya_id_for_add INTEGER,
                             nomenklatur_number_for_add TEXT,
                             date_for_add TIMESTAMP WITH TIME ZONE)
RETURNS void AS $$
DECLARE
	new_hardware_id INTEGER;
BEGIN
	FOR i IN 1..count_for_add
        	LOOP
			INSERT INTO  hardware (type, characteristics, trebovanie_nakladnaya_id, nomenklatur_number)
			     VALUES  (type_for_add, characteristics_for_add, trebovanie_nakladnaya_id_for_add, nomenklatur_number_for_add)
			  RETURNING  id INTO new_hardware_id;

			INSERT INTO  movement (hardware_id, place_id, date, employee_name_at_time_of_movement)
			     VALUES (new_hardware_id, stock_id_for_add, date_for_add, '');
        	END LOOP;
END;
$$
LANGUAGE plpgsql;



CREATE FUNCTION add_consumable_for_printers(count_for_add INTEGER,
                                            stock_id_for_add INTEGER,
                                            type_for_add TEXT,
                                            characteristics_for_add TEXT,
                                            trebovanie_nakladnaya_id_for_add INTEGER,
                                            nomenklatur_number_for_add TEXT,
                                            date_for_add TIMESTAMP WITH TIME ZONE)
RETURNS void AS $$
DECLARE
	new_consumable_for_printers_id INTEGER;
BEGIN
	FOR i IN 1..count_for_add
        	LOOP
			INSERT INTO  consumable_for_printers (type, characteristics, trebovanie_nakladnaya_id, nomenklatur_number)
			     VALUES  (type_for_add, characteristics_for_add, trebovanie_nakladnaya_id_for_add, nomenklatur_number_for_add)
			  RETURNING  id INTO new_consumable_for_printers_id;

			INSERT INTO  consumable_for_printers_movement (consumable_for_printers_id, place_id, date, employee_name_at_time_of_movement, printer_characteristics_at_time_of_movement)
			     VALUES (new_consumable_for_printers_id, stock_id_for_add, date_for_add, '', '');
        	END LOOP;
END;
$$
LANGUAGE plpgsql;



CREATE FUNCTION get_hardware_list_with_place(status_for_search TEXT,
                                             id_for_search TEXT,
                                             type_for_search TEXT,
                                             characteristics_for_search TEXT,
                                             trebovanie_nakladnaya_id_for_search TEXT,
                                             nomenklatur_number_for_search TEXT)
RETURNS TABLE(id INTEGER, type TEXT, characteristics TEXT, type_material_values_name TEXT, trebovanie_nakladnaya_id INTEGER, nomenklatur_number TEXT, place_id INTEGER,
              place_building TEXT, place_room TEXT, place_department TEXT, employee_position TEXT, employee_name TEXT, description TEXT, type_place_title TEXT, date TIMESTAMP)
AS $$
	DECLARE
		record_hardware RECORD;
		record_place RECORD;
		temp_place_id integer;
	BEGIN
   		FOR record_hardware IN SELECT * FROM hardware WHERE
   		       (hardware.id::text LIKE id_for_search
   		    AND LOWER(hardware.type) LIKE LOWER(type_for_search)
   		    AND LOWER(hardware.characteristics) LIKE LOWER(characteristics_for_search)
   		    AND hardware.trebovanie_nakladnaya_id::text LIKE trebovanie_nakladnaya_id_for_search
   		    AND hardware.nomenklatur_number LIKE nomenklatur_number_for_search)
   		    ORDER BY hardware.id DESC
        		LOOP
				SELECT movement.place_id INTO temp_place_id FROM movement WHERE movement.hardware_id = record_hardware.id ORDER BY movement.id DESC LIMIT 1;
				SELECT place.id,
                       place.building building,
                       place.room room,
                       place.department department,
                       place.employee_position employee_position,
                       place.employee_name employee_name,
                       type_place.title type_place_title,
                       place.description description INTO STRICT record_place FROM place LEFT JOIN type_place ON (place.type_place_id = type_place.id) WHERE place.id = temp_place_id;
				IF record_place.type_place_title <> status_for_search THEN
					CONTINUE;
				ELSE
					IF record_place.type_place_title = status_for_search THEN
						id = record_hardware.id;
						type = record_hardware.type;
						characteristics = record_hardware.characteristics;
						SELECT type_material_values.name INTO type_material_values_name FROM trebovanie_nakladnaya LEFT JOIN type_material_values ON (type_material_values.id = trebovanie_nakladnaya.type_material_values_id) WHERE (trebovanie_nakladnaya.id = record_hardware.trebovanie_nakladnaya_id);
						trebovanie_nakladnaya_id = record_hardware.trebovanie_nakladnaya_id;
						nomenklatur_number = record_hardware.nomenklatur_number;
						place_id = record_place.id;
						place_building = record_place.building;
						place_room = record_place.room;
						place_department = record_place.department;
						employee_position = record_place.employee_position;
						employee_name = record_place.employee_name;
						description = record_place.description;
						type_place_title = record_place.type_place_title;
             			RETURN next;
					END IF;
				END IF;
        		END LOOP;
   	END;
$$ LANGUAGE plpgsql;




CREATE FUNCTION get_list_hardware_for_place(INTEGER) RETURNS TABLE (hardware_id INTEGER, type_hardware_title VARCHAR, characteristics VARCHAR) AS
$$
    DECLARE
        rec_movement RECORD;
        temp_place_id INTEGER;
        rec_hardware RECORD;
    BEGIN
        FOR rec_movement IN SELECT * FROM movement WHERE place_id = $1
        LOOP
            SELECT movement.place_id into temp_place_id FROM movement where movement.hardware_id = rec_movement.hardware_id ORDER BY movement.id DESC limit 1;
            IF temp_place_id = $1 THEN
                SELECT * INTO STRICT rec_hardware FROM hardware WHERE hardware.id = rec_movement.hardware_id;
                hardware_id = rec_hardware.id;
                SELECT title INTO type_hardware_title FROM type_hardware WHERE type_hardware.id = rec_hardware.type_hardware_id;
                characteristics = rec_hardware.characteristics;
                RETURN NEXT;
            END IF;
        END LOOP;
    END;
$$
LANGUAGE plpgsql;




CREATE FUNCTION add_trebovanie_nakladnaya(type_material_values_id_for_add INTEGER,
                                          date_for_add TIMESTAMP,
                                          contractor_for_add TEXT,
                                          an_invoice_for_payment_for_add TEXT,
                                          shipping_document_for_add TEXT,
                                          comment_for_add TEXT)
RETURNS INTEGER AS $$
DECLARE
	new_trebovanie_nakladnaya_id INTEGER;
BEGIN
    INSERT INTO  trebovanie_nakladnaya (type_material_values_id,
                                       date,
                                       comment,
                                       shipping_document,
                                       an_invoice_for_payment,
                                       contractor)
         VALUES (type_material_values_id_for_add,
                 date_for_add,
                 comment_for_add,
                 shipping_document_for_add,
                 an_invoice_for_payment_for_add,
                 contractor_for_add)
      RETURNING  id INTO new_trebovanie_nakladnaya_id;
    RETURN new_trebovanie_nakladnaya_id;
END;
$$
LANGUAGE plpgsql;




CREATE FUNCTION get_consumable_for_printers_list(type_for_search TEXT, characteristics_for_search TEXT, trebovanie_nakladnaya_id_for_search TEXT, nomenklatur_number_for_search TEXT)
RETURNS TABLE(id INTEGER, type TEXT, characteristics TEXT, trebovanie_nakladnaya_id INTEGER, nomenklatur_number TEXT, place_id INTEGER, place_building TEXT, place_room TEXT) AS $$
	DECLARE
		record_consumable_for_printers RECORD;
		record_place RECORD;
		temp_place_id integer;
	BEGIN
   		FOR record_consumable_for_printers IN SELECT * FROM consumable_for_printers WHERE
   		       (consumable_for_printers.type LIKE type_for_search
   		    AND LOWER(consumable_for_printers.characteristics) LIKE LOWER(characteristics_for_search)
   		    AND consumable_for_printers.trebovanie_nakladnaya_id::text LIKE trebovanie_nakladnaya_id_for_search
   		    AND LOWER(consumable_for_printers.nomenklatur_number) LIKE LOWER(nomenklatur_number_for_search))
   		    ORDER BY consumable_for_printers.id DESC
        		LOOP
                    SELECT consumable_for_printers_movement.place_id INTO temp_place_id FROM consumable_for_printers_movement WHERE consumable_for_printers_movement.consumable_for_printers_id = record_consumable_for_printers.id ORDER BY consumable_for_printers_movement.id DESC LIMIT 1;
                    SELECT place.id, place.building building, place.room room, type_place.title type_place_title
                        INTO STRICT record_place FROM place LEFT JOIN type_place ON (place.type_place_id = type_place.id) WHERE place.id = temp_place_id;
                    IF record_place.type_place_title <> 'Склад' THEN
                        CONTINUE;
                    ELSE
                        IF record_place.type_place_title = 'Склад' THEN
                            id = record_consumable_for_printers.id;
                            type = record_consumable_for_printers.type;
                            characteristics = record_consumable_for_printers.characteristics;
                            trebovanie_nakladnaya_id = record_consumable_for_printers.trebovanie_nakladnaya_id;
                            nomenklatur_number = record_consumable_for_printers.nomenklatur_number;
                            place_id = record_place.id;
                            place_building = record_place.building;
                            place_room = record_place.room;
                            RETURN next;
                        END IF;
                    END IF;
        		END LOOP;
   	END;
$$ LANGUAGE plpgsql;

---

CREATE FUNCTION make_move_consumable_for_printers(type_for_add TEXT,
                                                  characteristics_for_add TEXT,
                                                  place_id INTEGER,
                                                  date TIMESTAMP WITH TIME ZONE,
                                                  printer_characteristics_at_time_of_movement TEXT,
                                                  employee_name_at_time_of_movement TEXT)
RETURNS INTEGER AS $$
	DECLARE
		temp_consumable_for_printers_id INTEGER;
		new_id INTEGER;
	BEGIN
	    SELECT get_consumable_for_printers_list.id INTO temp_consumable_for_printers_id FROM get_consumable_for_printers_list(type_for_add, characteristics_for_add,'%','%') LIMIT 1;
	    INSERT INTO consumable_for_printers_movement (consumable_for_printers_id, place_id, date, printer_characteristics_at_time_of_movement, employee_name_at_time_of_movement) VALUES (temp_consumable_for_printers_id, $3, $4, $5, $6) RETURNING id INTO new_id;
	    RETURN new_id;
	END;
$$ LANGUAGE plpgsql;

---

CREATE FUNCTION make_move_hardware(type_for_add TEXT,
                                   characteristics_for_add TEXT,
                                   place_id_for_add INTEGER,
                                   date_for_add TIMESTAMP WITH TIME ZONE,
                                   employee_name_at_time_of_movement_for_add TEXT)
RETURNS INTEGER AS $$
	DECLARE
		hardware_id_for_add INTEGER;
		movement_id INTEGER;
	BEGIN
	    SELECT get_hardware_list_with_place.id INTO hardware_id_for_add FROM get_hardware_list_with_place('Склад', '%', type_for_add, characteristics_for_add, '%', '%') LIMIT 1;
        INSERT INTO movement (hardware_id, place_id, date, employee_name_at_time_of_movement) VALUES (hardware_id_for_add, place_id_for_add, date_for_add, employee_name_at_time_of_movement_for_add) RETURNING id INTO movement_id;
	    RETURN movement_id;
	END;
$$ LANGUAGE plpgsql;


---

---getHistoryForPlaceOfPrinterList---
             SELECT  consumable_for_printers_movement.id consumable_for_printers_movement_id,
                     consumable_for_printers_movement.consumable_for_printers_id consumable_for_printers_id,
                     consumable_for_printers_movement.place_id place_id,
                     consumable_for_printers_movement.date date,
                     consumable_for_printers_movement.printer_characteristics_at_time_of_movement consumable_for_printers_movement_printer_characteristics_at_time_of_movement,
                     consumable_for_printers_movement.employee_name_at_time_of_movement consumable_for_printers_movement_employee_name_at_time_of_movement,
                     consumable_for_printers.type consumable_for_printers_type,
                     consumable_for_printers.characteristics consumable_for_printers_characteristics,
                     place.building building,
                     place.room room,
                     place.department
               FROM  consumable_for_printers_movement
          LEFT JOIN  consumable_for_printers ON (consumable_for_printers_movement.consumable_for_printers_id = consumable_for_printers.id)
          LEFT JOIN  place ON (consumable_for_printers_movement.place_id = place.id)
              WHERE  (consumable_for_printers_movement.place_id != 1 AND consumable_for_printers_movement.place_id::text LIKE '${place_of_printer_id}')
           ORDER BY  consumable_for_printers_movement.date DESC
---getHistoryForPlaceOfPrinterList---



CREATE FUNCTION status_hardware() RETURNS void
AS $$
	DECLARE
		record_hardware RECORD;
		record_place RECORD;
		temp_place_id INTEGER;
		temp_type_place_title TEXT;
	BEGIN
   		FOR record_hardware IN SELECT * FROM hardware
        		LOOP
                    SELECT movement.place_id INTO temp_place_id FROM movement WHERE movement.hardware_id = record_hardware.id ORDER BY movement.id DESC LIMIT 1;
                    SELECT type_place.title type_place_title INTO temp_type_place_title FROM place LEFT JOIN type_place ON (place.type_place_id = type_place.id) WHERE place.id = temp_place_id;
                    IF temp_type_place_title = 'Рабочее место' THEN
                        UPDATE hardware SET status = 'В эксплуатации' WHERE id = record_hardware.id;
                    END IF;
        		END LOOP;
   	END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION join_hardwares_for_workplace_and_workplaces(
    count_for_search INTEGER,
    status_for_search TEXT,
    super_type_for_search TEXT)
RETURNS TABLE(
    id_hardware INTEGER,
    type_hardware TEXT,
    characteristics TEXT,
    id_trebovanie INTEGER,
    nomenclature_number TEXT,
    status TEXT,
    comment TEXT,
    type_material_values TEXT,
    date TIMESTAMP WITH TIME ZONE,
    id_workplace TEXT,
    building TEXT,
    room TEXT,
    department TEXT,
    employee_position TEXT,
    employee_name TEXT)
AS $$
DECLARE
		hardware RECORD;
		workplace RECORD;
		trebovanie RECORD;
		id_last_workplace_for_hardware INTEGER;
BEGIN
    FOR hardware IN SELECT * FROM hardwares_for_workplace WHERE (hardwares_for_workplace.status LIKE status_for_search AND hardwares_for_workplace.supertype LIKE super_type_for_search) ORDER BY hardwares_for_workplace.id LIMIT count_for_search
    LOOP
        id_hardware = hardware.id;
        type_hardware = hardware.type;
        characteristics = hardware.characteristics;
        nomenclature_number = hardware.nomenclature_number;
        status = hardware.status;
        comment = hardware.comment;
        id_trebovanie = hardware.id_trebovanie;
        SELECT * INTO trebovanie FROM trebovaniya WHERE trebovaniya.id = hardware.id_trebovanie;
        date = trebovanie.date;
        type_material_values = trebovanie.type_material_values;

        IF hardware.status = 'На складе' THEN
            id_workplace = '';
            building = '';
            room = '';
            department = '';
            employee_position = '';
            employee_name = '';
            RETURN next;
        ELSE
            SELECT movements_hardwares_for_workplace.place_id
            INTO id_last_workplace_for_hardware
            FROM movements_hardwares_for_workplace
            WHERE movements_hardwares_for_workplace.hardware_id = hardware.id
            ORDER BY movements_hardwares_for_workplace.id DESC LIMIT 1;

            SELECT * INTO workplace FROM workplaces WHERE workplaces.id = id_last_workplace_for_hardware;
            id_workplace = workplace.id::TEXT;
            building = workplace.building;
            room = workplace.room;
            department = workplace.department;
            employee_position = workplace.employee_position;
            employee_name = workplace.employee_name;
            RETURN next;
        END IF;
    END LOOP;
END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION move_printers() RETURNS VOID
AS $$
DECLARE
    hardware RECORD;
BEGIN
    FOR hardware IN SELECT * FROM hardware_for_workplaces
    LOOP
        IF (hardware.type = 'Принтер' OR hardware.type = 'МФУ') THEN
            INSERT INTO hardware_for_printerplaces(type, characteristics, id_trebovanie, nomenclature_number, status, comment)
            VALUES(hardware.type, hardware.characteristics, hardware.id_trebovanie, hardware.nomenclature_number, hardware.status, hardware. comment);
        END IF;
    END LOOP;
END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION migrate_printerplaces()
RETURNS TABLE(id_hardware INTEGER,
              type_hardware TEXT,
              characteristics TEXT,
              id_trebovanie INTEGER,
              id_workplace INTEGER,
              place_building TEXT,
              place_room TEXT,
              place_department TEXT,
              employee_position TEXT,
              employee_name TEXT
              )
AS $$
	DECLARE
		hardware RECORD;
		workplace RECORD;
		movement RECORD;
	BEGIN
   		FOR hardware IN SELECT * FROM hardware_for_workplaces WHERE((hardware_for_workplaces.type LIKE 'Принтер' OR hardware_for_workplaces.type LIKE 'МФУ') AND (hardware_for_workplaces.status = 'В эксплуатации'))
        LOOP
		    SELECT * INTO movement FROM movements_hardwares_for_workplace WHERE movements_hardwares_for_workplace.hardware_id = hardware.id ORDER BY movements_hardwares_for_workplace.id DESC LIMIT 1;
			SELECT * INTO workplace FROM workplaces WHERE workplaces.id = movement.place_id;
			id_hardware = hardware.id;
			type_hardware = hardware.type;
			characteristics = hardware.characteristics;
			id_trebovanie = hardware.id_trebovanie;
			id_workplace = workplace.id;
			place_building = workplace.building;
			place_room = workplace.room;
			place_department = workplace.department;
			employee_position = workplace.employee_position;
			employee_name = workplace.employee_name;
      		RETURN next;
        END LOOP;
   	END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION move_workplaces_to_printerplaces()
RETURNS TABLE(id_hardware INTEGER,
              type_hardware TEXT,
              characteristics TEXT,
              id_trebovanie INTEGER,
              id_workplace INTEGER,
              place_building TEXT,
              place_room TEXT,
              place_department TEXT,
              employee_position TEXT,
              employee_name TEXT
              )
AS $$
	DECLARE
		hardware RECORD;
		workplace RECORD;
		movement RECORD;
		me BOOLEAN;
	BEGIN
   		FOR hardware IN SELECT * FROM hardware_for_workplaces WHERE((hardware_for_workplaces.type LIKE 'Принтер' OR hardware_for_workplaces.type LIKE 'МФУ') AND (hardware_for_workplaces.status = 'В эксплуатации'))
        LOOP
		    SELECT * INTO movement FROM movements_hardwares_for_workplace WHERE movements_hardwares_for_workplace.hardware_id = hardware.id ORDER BY movements_hardwares_for_workplace.id DESC LIMIT 1;
			SELECT * INTO workplace FROM workplaces WHERE workplaces.id = movement.place_id;
			id_hardware = hardware.id;
			type_hardware = hardware.type;
			characteristics = hardware.characteristics;
			id_trebovanie = hardware.id_trebovanie;
			id_workplace = workplace.id;
			place_building = workplace.building;
			place_room = workplace.room;
			place_department = workplace.department;
			employee_position = workplace.employee_position;
			employee_name = workplace.employee_name;
			IF (employee_name = '' AND employee_position = '') THEN
			    me = TRUE;
			ELSE
			    me = FALSE;
			END IF;
			INSERT INTO printerplaces (building,
			                           room,
			                           department,
			                           multiple_employees,
			                           employee_name,
			                           employee_position) VALUES(place_building,
			                                                     place_room,
                                                                 place_department,
                                                                 me,
                                                                 employee_name,
                                                                 employee_position);
      		RETURN next;
        END LOOP;
   	END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION move_printers_to_printerplaces()
RETURNS TABLE(id_hardware INTEGER,
              type_hardware TEXT,
              characteristics TEXT,
              id_trebovanie INTEGER,
              id_workplace INTEGER,
              place_building TEXT,
              place_room TEXT,
              place_department TEXT,
              employee_position TEXT,
              employee_name TEXT
              )
AS $$
	DECLARE
		hardware RECORD;
		workplace RECORD;
		movement RECORD;
		printer RECORD;
	BEGIN
   		FOR hardware IN SELECT * FROM hardware_for_workplaces WHERE((hardware_for_workplaces.type LIKE 'Принтер' OR hardware_for_workplaces.type LIKE 'МФУ') AND (hardware_for_workplaces.status = 'В эксплуатации'))
        LOOP
		    SELECT * INTO movement FROM movements_hardwares_for_workplace WHERE movements_hardwares_for_workplace.hardware_id = hardware.id ORDER BY movements_hardwares_for_workplace.id DESC LIMIT 1;
			SELECT * INTO workplace FROM workplaces WHERE workplaces.id = movement.place_id;
			id_hardware = hardware.id;
			type_hardware = hardware.type;
			characteristics = hardware.characteristics;
			id_trebovanie = hardware.id_trebovanie;
			id_workplace = workplace.id;
			place_building = workplace.building;
			place_room = workplace.room;
			place_department = workplace.department;
			employee_position = workplace.employee_position;
			employee_name = workplace.employee_name;
            SELECT * INTO printer FROM hardware_for_printerplaces WHERE (hardware_for_printerplaces.type = hardware.type AND
                                                                    hardware_for_printerplaces.characteristics = hardware.characteristics AND
                                                                    hardware_for_printerplaces.id_trebovanie = hardware.id_trebovanie AND
                                                                    hardware_for_printerplaces.status = 'В эксплуатации' AND
                                                                    hardware_for_printerplaces.nelzya = false)
            LIMIT 1;
            UPDATE hardware_for_printerplaces SET nelzya = true WHERE id = printer.id;
			UPDATE printerplaces SET printer = PRINTER.id WHERE (printerplaces.building = workplace.building AND
			                                                     printerplaces.room = workplace.room AND
			                                                     printerplaces.department = workplace.department AND
			                                                     printerplaces.employee_name = workplace.employee_name AND
			                                                     printerplaces.employee_position = workplace.employee_position);

      		RETURN next;
        END LOOP;
   	END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION check_migrate_printers()
RETURNS TABLE(
              type_hardware TEXT,
              type_printer TEXT,
              characteristics TEXT,
              characteristics_printer TEXT,
              id_trebovanie INTEGER,
              id_trebovanie_printer TEXT,
              place_building TEXT,
              printerplace_building TEXT,
              place_room TEXT,
              printerplace_room TEXT,
              place_department TEXT,
              printerplace_department TEXT,
              employee_position TEXT,
              printerplace_employee_position TEXT,
              employee_name TEXT,
              printerplace_employee_name TEXT,
              checkk BOOLEAN
              )
AS $$
	DECLARE
		hardware RECORD;
		workplace RECORD;
		movement RECORD;
		printerplace RECORD;
	BEGIN
   		FOR hardware IN SELECT * FROM hardware_for_workplaces WHERE((hardware_for_workplaces.type LIKE 'Принтер' OR hardware_for_workplaces.type LIKE 'МФУ') AND (hardware_for_workplaces.status = 'В эксплуатации'))
        LOOP
		    SELECT * INTO movement FROM movements_hardwares_for_workplace WHERE movements_hardwares_for_workplace.hardware_id = hardware.id ORDER BY movements_hardwares_for_workplace.id DESC LIMIT 1;
			SELECT * INTO workplace FROM workplaces WHERE workplaces.id = movement.place_id;
			type_hardware = hardware.type;
			characteristics = hardware.characteristics;
			id_trebovanie = hardware.id_trebovanie;
			place_building = workplace.building;
			place_room = workplace.room;
			place_department = workplace.department;
			employee_position = workplace.employee_position;
			employee_name = workplace.employee_name;
            SELECT * INTO printerplace FROM printerplaces LEFT JOIN hardware_for_printerplaces ON (printerplaces.printer = hardware_for_printerplaces.id) WHERE(
                printerplaces.building = workplace.building AND
                printerplaces.room = workplace.room AND
                printerplaces.department = workplace.department AND
                printerplaces.employee_position = workplace.employee_position AND
                printerplaces.employee_name = workplace.employee_name);
                type_printer = printerplace.type;
                characteristics_printer = printerplace.characteristics;
                id_trebovanie_printer = printerplace.id_trebovanie;
                printerplace_building = printerplace.building;
                printerplace_room = printerplace.room;
                printerplace_department = printerplace.department;
                printerplace_employee_position = printerplace.employee_position;
                printerplace_employee_name = printerplace.employee_name;

                IF (type_hardware = type_printer AND
                    characteristics = characteristics_printer AND
                    id_trebovanie = id_trebovanie_printer:INTEGER AND
                    place_building = printerplace_building AND
                    place_room = printerplace_room AND
                    place_department = printerplace_department AND
                    employee_position = printerplace_employee_position AND
                    employee_name = printerplace_employee_name) THEN
                        checkk = true;
                ELSE
                    checkk = false;
                END IF;
      		RETURN next;
        END LOOP;
   	END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION fill_id_printer_place_in_hardware_printer_place_table()
RETURNS VOID
AS $$
	DECLARE
        printer_place RECORD;
	BEGIN
   		FOR printer_place IN SELECT * FROM printer_places
        LOOP
            UPDATE hardware_printer_place SET id_printer_place = printer_place.id WHERE hardware_printer_place.id = printer_place.printer;
        END LOOP;
   	END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION merge_tables_printer_hardware_and_printer_place(
    status_printer_hardware_for_search TEXT,
    id_printer_hardware_for_search TEXT,
    type_printer_hardware_for_search TEXT,
    characteristics_printer_hardware_for_search TEXT,
    nomenclature_number_for_search TEXT,
    id_trebovaniya_for_search TEXT)
RETURNS TABLE(
    status_printer_hardware TEXT,
    id_printer_hardware INTEGER,
    type_printer_hardware TEXT,
    characteristics_printer_hardware TEXT,
    nomenclature_number TEXT,
    id_trebovaniya INTEGER,
    date TIMESTAMP WITH TIME ZONE,
    id_printer_place TEXT,
    building TEXT,
    room TEXT,
    department TEXT,
    employee_position TEXT,
    employee_name TEXT,
    multi_users TEXT)
AS $$
DECLARE
    printer_hardware_one RECORD;
    printer_place_one RECORD;
    trebovaniya_one RECORD;
BEGIN
    FOR printer_hardware_one IN
        SELECT * FROM printer_hardware WHERE
            printer_hardware.status LIKE status_printer_hardware_for_search AND
            printer_hardware.id::TEXT LIKE id_printer_hardware_for_search AND
            printer_hardware.type LIKE type_printer_hardware_for_search AND
            LOWER(printer_hardware.characteristics) LIKE LOWER(characteristics_printer_hardware_for_search) AND
            LOWER(printer_hardware.nomenclature_number) LIKE LOWER(nomenclature_number_for_search) AND
            printer_hardware.id_trebovaniya::TEXT LIKE id_trebovaniya_for_search
    LOOP
        status_printer_hardware = printer_hardware_one.status;
        id_printer_hardware = printer_hardware_one.id;
        type_printer_hardware = printer_hardware_one.type;
        characteristics_printer_hardware = printer_hardware_one.characteristics;
        nomenclature_number = printer_hardware_one.nomenclature_number;
        SELECT * INTO trebovaniya_one FROM trebovaniya WHERE trebovaniya.id = printer_hardware_one.id_trebovaniya;
        id_trebovaniya = trebovaniya_one.id;
        date = trebovaniya_one.date;
        IF printer_hardware_one.id_printer_place IS NULL THEN
            id_printer_place = '';
            building = '';
            room = '';
            department = '';
            employee_position = '';
            employee_name = '';
            multi_users = '';
        ELSE
            SELECT * INTO printer_place_one FROM printer_place WHERE printer_place.id = printer_hardware_one.id_printer_place;
            id_printer_place = printer_place_one.id;
            building = printer_place_one.building;
            room = printer_place_one.room;
            department = printer_place_one.department;
            employee_position = printer_place_one.employee_position;
            employee_name = printer_place_one.employee_name;
            multi_users = printer_place_one.multi_users;
        END IF;
        RETURN NEXT;
    END LOOP;
END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION merge_tables_printer_consumable_and_trebovaniya(
    status_printer_consumable_for_search TEXT,
    id_printer_consumable_for_search TEXT,
    type_printer_consumable_for_search TEXT,
    characteristics_printer_consumable_for_search TEXT,
    nomenclature_number_for_search TEXT,
    id_trebovaniya_for_search TEXT)
RETURNS TABLE(
    status_printer_consumable TEXT,
    id_printer_consumable INTEGER,
    type_printer_consumable TEXT,
    characteristics_printer_consumable TEXT,
    nomenclature_number TEXT,
    id_trebovaniya INTEGER,
    date TIMESTAMP WITH TIME ZONE)
AS $$
DECLARE
    printer_consumable_one RECORD;
    trebovaniya_one RECORD;
BEGIN
    FOR printer_consumable_one IN
        SELECT * FROM printer_consumable
        WHERE printer_consumable.status LIKE status_printer_consumable_for_search AND
              printer_consumable.id::TEXT LIKE id_printer_consumable_for_search AND
              printer_consumable.type LIKE type_printer_consumable_for_search AND
              LOWER(printer_consumable.characteristics) LIKE LOWER(characteristics_printer_consumable_for_search) AND
              LOWER(printer_consumable.nomenclature_number) LIKE LOWER(nomenclature_number_for_search) AND
              printer_consumable.id_trebovaniya::TEXT LIKE id_trebovaniya_for_search
    LOOP
        status_printer_consumable = printer_consumable_one.status;
        id_printer_consumable = printer_consumable_one.id;
        type_printer_consumable = printer_consumable_one.type;
        characteristics_printer_consumable = printer_consumable_one.characteristics;
        nomenclature_number = printer_consumable_one.nomenclature_number;
        SELECT * INTO trebovaniya_one FROM trebovaniya WHERE trebovaniya.id = printer_consumable_one.id_trebovaniya;
        id_trebovaniya = trebovaniya_one.id;
        date = trebovaniya_one.date;
        IF printer_consumable_one.id_printer_hardware IS NULL THEN
            id_printer_hardware = '';
            type_printer_hardware = '';
            characteristics_printer_hardware = '';
            id_printer_place = '';
            building = '';
            room = '';
        ELSE
            SELECT * INTO printer_hardware_one FROM printer_hardware WHERE printer_hardware.id = printer_consumable_one.id_printer_hardware;
            id_printer_hardware = printer_hardware_one.id;
            type_printer_hardware = printer_hardware_one.type;
            characteristics_printer_hardware = printer_hardware_one.characteristics;
            SELECT * INTO printer_place_one FROM printer_place WHERE printer_place.id = printer_hardware_one.id_printer_place;
            id_printer_place = printer_place_one.id;
            building = printer_place_one.building;
            room = printer_place_one.room;
        END IF;
        RETURN NEXT;
    END LOOP;
END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION make_move_printer_consumable(
    type_printer_consumable_for_add TEXT,
    characteristics_printer_consumable_for_add TEXT,
    date_for_move_operation TIMESTAMP WITH TIME ZONE,
    id_printer_place_for_move_operation INTEGER)
RETURNS INTEGER
AS $$
DECLARE
    printer_consumable_for_move_operation RECORD;
    printer_place_for_move_operation RECORD;
    new_id_printer_consumable_movement INTEGER;
BEGIN
    SELECT * INTO printer_consumable_for_move_operation FROM printer_consumable WHERE
        printer_consumable.status LIKE 'На складе' AND
        printer_consumable.type LIKE type_printer_consumable_for_add AND
        printer_consumable.characteristics LIKE characteristics_printer_consumable_for_add
    LIMIT 1;

    SELECT * INTO printer_place_for_move_operation FROM printer_place WHERE printer_place.id = id_printer_place_for_move_operation;

    INSERT INTO printer_consumable_movement(
        id_printer_consumable,
        date,
        id_printer_place,
        building,
        room,
        department,
        employee_position,
        employee_name,
        id_printer_hardware)
    VALUES(
        printer_consumable_for_move_operation.id,
        date_for_move_operation,
        printer_place_for_move_operation.id,
        printer_place_for_move_operation.building,
        printer_place_for_move_operation.room,
        printer_place_for_move_operation.department,
        printer_place_for_move_operation.employee_position,
        printer_place_for_move_operation.employee_name,
        printer_place_for_move_operation.id_printer_hardware)
    RETURNING id INTO new_id_printer_consumable_movement;

    UPDATE printer_consumable SET status = 'В эксплуатации' WHERE id = printer_consumable_for_move_operation.id;
    RETURN new_id_printer_consumable_movement;
END;
$$ LANGUAGE plpgsql;



CREATE FUNCTION return_to_stock_and_delete_movement(
    id_printer_consumable INTEGER,
    id_printer_consumable_movement INTEGER)
RETURNS VOID
AS $$
BEGIN
    UPDATE printer_consumable SET status = 'На складе' WHERE id = id_printer_consumable;
    DELETE FROM printer_consumable_movement WHERE id = id_printer_consumable_movement;
END;
$$ LANGUAGE plpgsql;